// import { useState, useEffect } from 'react';
// import { GetServerSideProps } from 'next';

// interface LogEntry {
//   timestamp: string;
//   level: string;
//   message: string;
// }

// interface LogsProps {
//   initialLogs: LogEntry[];
// }

// export const getServerSideProps: GetServerSideProps<LogsProps> = async (context) => {
//   const res = await fetch(`${process.env.NEXT_PUBLIC_API_URL}/api/logs`, {
//     headers: {
//       'Authorization': `Bearer ${context.req.cookies.jwt}`,
//     },
//   });
//   const data = await res.json();

//   return {
//     props: {
//       initialLogs: data.logs,
//     },
//   };
// };

// const LogsPage: React.FC<LogsProps> = ({ initialLogs }) => {
//   const [logs, setLogs] = useState<LogEntry[]>(initialLogs);
//   const [sortOrder, setSortOrder] = useState<'asc' | 'desc'>('desc');
//   const [levelFilter, setLevelFilter] = useState<string>('');

//   useEffect(() => {
//     fetchLogs();
//   }, [sortOrder, levelFilter]);

//   const fetchLogs = async () => {
//     try {
//       const response = await fetch(
//         `${process.env.NEXT_PUBLIC_API_URL}/api/logs?sortOrder=${sortOrder}&logLevel=${levelFilter}`,
//         {
//           headers: {
//             'Authorization': `Bearer ${localStorage.getItem('jwt')}`,
//           },
//         }
//       );
//       if (response.ok) {
//         const data = await response.json();
//         setLogs(data.logs);
//       } else {
//         console.error('Failed to fetch logs');
//       }
//     } catch (error) {
//       console.error('Error fetching logs:', error);
//     }
//   };

//   return (
//     <div>
//       <div>
//         <button onClick={() => setSortOrder(sortOrder === 'asc' ? 'desc' : 'asc')}>
//           시간순 정렬: {sortOrder === 'asc' ? '오름차순' : '내림차순'}
//         </button>
//         <select onChange={(e) => setLevelFilter(e.target.value)} value={levelFilter}>
//           <option value="">모든 레벨</option>
//           <option value="INFO">INFO</option>
//           <option value="WARN">WARN</option>
//           <option value="ERROR">ERROR</option>
//         </select>
//       </div>
//       <table>
//         <thead>
//           <tr>
//             <th>타임스탬프</th>
//             <th>로그 레벨</th>
//             <th>로그 본문</th>
//           </tr>
//         </thead>
//         <tbody>
//           {logs.map((log, index) => (
//             <tr key={index}>
//               <td>{log.timestamp}</td>
//               <td>{log.level}</td>
//               <td>{log.message}</td>
//             </tr>
//           ))}
//         </tbody>
//       </table>
//     </div>
//   );
// };

// export default LogsPage;